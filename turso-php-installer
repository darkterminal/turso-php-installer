#!/usr/bin/env php
<?php

use Darkterminal\TursoLibSQLInstaller\Services\Generators\CertificateGenerator;
use Darkterminal\TursoLibSQLInstaller\Services\Generators\DatabaseTokenGenerator;
use Darkterminal\TursoLibSQLInstaller\Services\TenancyForLaravel\TenancyForLaravelProvider;
use Darkterminal\TursoLibSQLInstaller\TursoLibSQLInstaller;

ini_set('display_errors', false);
if (file_exists(__DIR__ . '/../../autoload.php')) {
    require __DIR__ . '/../../autoload.php';
} else {
    require __DIR__ . '/vendor/autoload.php';
}

$app = new TursoLibSQLInstaller();

$command = $argv[1] ?? null;

$autoConfirm = false;
$specifiedVersion = null;

foreach ($argv as $arg) {
    if ($arg === '-y') {
        $autoConfirm = true;
    } elseif (strpos($arg, '--version=') === 0) {
        $specifiedVersion = substr($arg, strlen('--version='));
    }
}

$command = strtolower($command);

match (true) {
    in_array($command, ['version', '-v', '--version']) => $app->version(),
    in_array($command, ['help', '-h', '--help']) => $app->help(),
    $command === 'install' => $app->install($autoConfirm, $specifiedVersion),
    $command === 'update' => $app->update(),
    $command === 'uninstall' => $app->uninstall(),
    $command === 'token:create-to-json' => (new DatabaseTokenGenerator())->generete()->toJSON(true),
    $command === 'token:create-to-archive' => (new DatabaseTokenGenerator())->generete()->toArchive(),
    $command === 'generate:certs' => (new CertificateGenerator())->generate(),
    $command === 'add:tenancy-for-laravel' => (new TenancyForLaravelProvider(getcwd()))->installTenancy(),
    default => $app->help(),
};
